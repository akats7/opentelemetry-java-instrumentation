/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */

package io.opentelemetry.instrumentation.runtimemetrics.java8;

import static java.util.Objects.requireNonNull;

import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.common.AttributeKey;
import io.opentelemetry.api.common.Attributes;
import io.opentelemetry.api.metrics.Meter;
import io.opentelemetry.api.metrics.ObservableLongMeasurement;
import io.opentelemetry.instrumentation.runtimemetrics.java8.internal.JmxRuntimeMetricsUtil;
import io.opentelemetry.semconv.JvmAttributes;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadInfo;
import java.lang.management.ThreadMXBean;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.annotation.Nullable;

/**
 * Registers measurements that generate metrics about JVM threads. The metrics generated by this
 * class follow <a
 * href="https://github.com/open-telemetry/semantic-conventions/blob/main/docs/runtime/jvm-metrics.md">the
 * stable JVM metrics semantic conventions</a>.
 *
 * <p>Example usage:
 *
 * <pre>{@code
 * ThreadNames.registerObservers(GlobalOpenTelemetry.get());
 * }</pre>
 *
 * <p>Example metrics being exported:
 *
 * <pre>
 *   jvm.thread.count{jvm.thread.daemon=true,jvm.thread.state="waiting"} 1
 *   jvm.thread.count{jvm.thread.daemon=true,jvm.thread.state="runnable"} 2
 *   jvm.thread.count{jvm.thread.daemon=false,jvm.thread.state="waiting"} 2
 *   jvm.thread.count{jvm.thread.daemon=false,jvm.thread.state="runnable"} 3
 * </pre>
 */
public final class ThreadNames {

  // Visible for testing
  static final ThreadNames INSTANCE = new ThreadNames();

  private static final AttributeKey<String> THREAD_NAME = AttributeKey.stringKey("jvm.thread.name");

  /** Register observers for java runtime class metrics. */
  public static List<AutoCloseable> registerObservers(OpenTelemetry openTelemetry) {
    Meter meter = JmxRuntimeMetricsUtil.getMeter(openTelemetry);
    List<AutoCloseable> observables = new ArrayList<>();

    ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();

    observables.add(
        meter
            .upDownCounterBuilder("jvm.thread.count")
            .setDescription("Number of executing platform threads.")
            .setUnit("{thread}")
            .buildWithCallback(java9AndNewerCallback(threadMxBean)));

    observables.add(
        meter
            .upDownCounterBuilder("jvm.thread.cpu_time")
            .setDescription("the amount of CPU time that the specified thread has used")
            .setUnit("{ns}")
            .buildWithCallback(threadCpuTimeCallback(threadMxBean)));

    observables.add(
        meter
            .upDownCounterBuilder("jvm.thread.user_time")
            .setDescription(
                "the amount of CPU time that the specified thread has spent in user mode")
            .setUnit("{ns}")
            .buildWithCallback(threadUserTimeCallback(threadMxBean)));

    return observables;
  }

  @Nullable private static final MethodHandle THREAD_INFO_IS_DAEMON;

  static {
    MethodHandle isDaemon;
    try {
      isDaemon =
          MethodHandles.publicLookup()
              .findVirtual(ThreadInfo.class, "isDaemon", MethodType.methodType(boolean.class));
    } catch (NoSuchMethodException | IllegalAccessException e) {
      isDaemon = null;
    }
    THREAD_INFO_IS_DAEMON = isDaemon;
  }

  private static Consumer<ObservableLongMeasurement> threadCpuTimeCallback(
      ThreadMXBean threadBean) {
    return measurement -> {
      Map<Attributes, Long> times = new HashMap<>();
      long[] threadIds = threadBean.getAllThreadIds();
      for (ThreadInfo threadInfo : threadBean.getThreadInfo(threadIds)) {
        if (threadInfo == null) {
          continue;
        }
        long threadId = threadInfo.getThreadId();
        String threadName = escapeThreadName(threadInfo.getThreadName());
        long threadCpuTime = threadBean.getThreadCpuTime(threadId);
        Attributes threadAttributes = threadAttributes(threadInfo, threadName);
        times.put(threadAttributes, threadCpuTime);
      }
      times.forEach((threadAttributes, time) -> measurement.record(time, threadAttributes));
    };
  }

  private static Consumer<ObservableLongMeasurement> threadUserTimeCallback(
      ThreadMXBean threadBean) {
    return measurement -> {
      Map<Attributes, Long> times = new HashMap<>();
      long[] threadIds = threadBean.getAllThreadIds();
      for (ThreadInfo threadInfo : threadBean.getThreadInfo(threadIds)) {
        if (threadInfo == null) {
          continue;
        }
        long threadId = threadInfo.getThreadId();
        String threadName = escapeThreadName(threadInfo.getThreadName());
        long threadCpuTime = threadBean.getThreadUserTime(threadId);
        Attributes threadAttributes = threadAttributes(threadInfo, threadName);
        times.put(threadAttributes, threadCpuTime);
      }
      times.forEach((threadAttributes, time) -> measurement.record(time, threadAttributes));
    };
  }

  private static Consumer<ObservableLongMeasurement> java9AndNewerCallback(
      ThreadMXBean threadBean) {
    return measurement -> {
      Map<Attributes, Long> counts = new HashMap<>();
      long[] threadIds = threadBean.getAllThreadIds();
      for (ThreadInfo threadInfo : threadBean.getThreadInfo(threadIds)) {
        if (threadInfo == null) {
          continue;
        }
        String threadName = escapeThreadName(threadInfo.getThreadName());
        Attributes threadAttributes = threadAttributesWithState(threadInfo, threadName);
        counts.compute(threadAttributes, (k, value) -> value == null ? 1 : value + 1);
      }
      counts.forEach((threadAttributes, count) -> measurement.record(count, threadAttributes));
    };
  }

  private static Attributes threadAttributesWithState(ThreadInfo threadInfo, String threadName) {
    boolean isDaemon;
    try {
      isDaemon = (boolean) requireNonNull(THREAD_INFO_IS_DAEMON).invoke(threadInfo);
    } catch (Throwable e) {
      throw new IllegalStateException("Unexpected error happened during ThreadInfo#isDaemon()", e);
    }
    String threadState = threadInfo.getThreadState().name().toLowerCase(Locale.ROOT);
    return Attributes.of(
        JvmAttributes.JVM_THREAD_DAEMON,
        isDaemon,
        JvmAttributes.JVM_THREAD_STATE,
        threadState,
        THREAD_NAME,
        threadName);
  }

  private static Attributes threadAttributes(ThreadInfo threadInfo, String threadName) {
    boolean isDaemon;
    try {
      isDaemon = (boolean) requireNonNull(THREAD_INFO_IS_DAEMON).invoke(threadInfo);
    } catch (Throwable e) {
      throw new IllegalStateException("Unexpected error happened during ThreadInfo#isDaemon()", e);
    }
    return Attributes.of(JvmAttributes.JVM_THREAD_DAEMON, isDaemon, THREAD_NAME, threadName);
  }

  private static String escapeThreadName(String threadName) {
    if (threadName == null) {
      return null;
    }
    return threadName.replaceAll("\\d+", "#");
  }

  private ThreadNames() {}
}
